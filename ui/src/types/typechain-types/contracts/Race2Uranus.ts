/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export declare namespace Race2Uranus {
  export type RaceConfigStruct = {
    maxRockets: PromiseOrValue<BigNumberish>;
    minStakeAmount: PromiseOrValue<BigNumberish>;
    maxStakeAmount: PromiseOrValue<BigNumberish>;
    revealBounty: PromiseOrValue<BigNumberish>;
    boostPrice: PromiseOrValue<BigNumberish>;
    boostAmount: PromiseOrValue<BigNumberish>;
    rocketsSharePercent: PromiseOrValue<BigNumberish>;
    winningRocketSharePercent: PromiseOrValue<BigNumberish>;
    devFeePercent: PromiseOrValue<BigNumberish>;
    whitelistedNfts: PromiseOrValue<string>[];
  };

  export type RaceConfigStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number,
    string[]
  ] & {
    maxRockets: number;
    minStakeAmount: BigNumber;
    maxStakeAmount: BigNumber;
    revealBounty: BigNumber;
    boostPrice: BigNumber;
    boostAmount: number;
    rocketsSharePercent: number;
    winningRocketSharePercent: number;
    devFeePercent: number;
    whitelistedNfts: string[];
  };

  export type RocketStruct = {
    id: PromiseOrValue<BigNumberish>;
    rocketeer: PromiseOrValue<string>;
    nft: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    totalStake: PromiseOrValue<BigNumberish>;
    totalBoosts: PromiseOrValue<BigNumberish>;
    rocketeerRewardClaimed: PromiseOrValue<boolean>;
  };

  export type RocketStructOutput = [number, string, string, BigNumber, BigNumber, number, boolean] & {
    id: number;
    rocketeer: string;
    nft: string;
    nftId: BigNumber;
    totalStake: BigNumber;
    totalBoosts: number;
    rocketeerRewardClaimed: boolean;
  };

  export type RaceStruct = {
    id: PromiseOrValue<BigNumberish>;
    configSnapshot: Race2Uranus.RaceConfigStruct;
    started: PromiseOrValue<boolean>;
    finished: PromiseOrValue<boolean>;
    revealBlock: PromiseOrValue<BigNumberish>;
    rockets: Race2Uranus.RocketStruct[];
    rewardPool: PromiseOrValue<BigNumberish>;
    winner: PromiseOrValue<BigNumberish>;
    rewardPerShare: PromiseOrValue<BigNumberish>;
    winningRocketShare: PromiseOrValue<BigNumberish>;
    otherRocketsShare: PromiseOrValue<BigNumberish>;
  };

  export type RaceStructOutput = [
    BigNumber,
    Race2Uranus.RaceConfigStructOutput,
    boolean,
    boolean,
    BigNumber,
    Race2Uranus.RocketStructOutput[],
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    configSnapshot: Race2Uranus.RaceConfigStructOutput;
    started: boolean;
    finished: boolean;
    revealBlock: BigNumber;
    rockets: Race2Uranus.RocketStructOutput[];
    rewardPool: BigNumber;
    winner: number;
    rewardPerShare: BigNumber;
    winningRocketShare: BigNumber;
    otherRocketsShare: BigNumber;
  };

  export type TimeParamsStruct = {
    blastOffTimes: PromiseOrValue<BigNumberish>[];
    revealDelayMinutes: PromiseOrValue<BigNumberish>;
    blockTimeMillis: PromiseOrValue<BigNumberish>;
  };

  export type TimeParamsStructOutput = [number[], number, number] & {
    blastOffTimes: number[];
    revealDelayMinutes: number;
    blockTimeMillis: number;
  };
}

export interface Race2UranusInterface extends utils.Interface {
  functions: {
    '_calcRevealTimestamp(uint256,uint32[],uint8)': FunctionFragment;
    'applyBoost(uint256,uint8)': FunctionFragment;
    'autoCreateNextRace()': FunctionFragment;
    'beneficiary()': FunctionFragment;
    'calcClaimableAmount(address,uint256)': FunctionFragment;
    'calcClaimableAmountAll(address)': FunctionFragment;
    'calcClaimableAmountMulti(address,uint256[])': FunctionFragment;
    'calcRocketeerReward(uint256,address)': FunctionFragment;
    'calcStakeReward(uint256,address)': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'claimAll()': FunctionFragment;
    'claimMulti(uint256[])': FunctionFragment;
    'createRace()': FunctionFragment;
    'enterRace(uint256,address,uint256,uint256)': FunctionFragment;
    'finishRace(uint256)': FunctionFragment;
    'getActiveRaceIds()': FunctionFragment;
    'getBlockhash()': FunctionFragment;
    'getBlockhashUint()': FunctionFragment;
    'getRace(uint256)': FunctionFragment;
    'getRaceConfig()': FunctionFragment;
    'getRaceCount()': FunctionFragment;
    'getRocketForRace(uint256,uint8)': FunctionFragment;
    'getRocketsForRace(uint256)': FunctionFragment;
    'getStakeAmountForStaker(uint256,uint8,address)': FunctionFragment;
    'getTimeParams()': FunctionFragment;
    'getWhitelistedNfts()': FunctionFragment;
    'initialize(address,address[],address)': FunctionFragment;
    'magic()': FunctionFragment;
    'maxBoostsPerRocket()': FunctionFragment;
    'owner()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revealBoosts(uint256,uint8,uint8)': FunctionFragment;
    'setBeneficiary(address)': FunctionFragment;
    'setRaceConfig((uint8,uint256,uint256,uint256,uint256,uint8,uint8,uint8,uint8,address[]))': FunctionFragment;
    'setTimeParams((uint32[],uint8,uint32))': FunctionFragment;
    'stakeOnRocket(uint256,uint8,uint256)': FunctionFragment;
    'startRace(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_calcRevealTimestamp'
      | 'applyBoost'
      | 'autoCreateNextRace'
      | 'beneficiary'
      | 'calcClaimableAmount'
      | 'calcClaimableAmountAll'
      | 'calcClaimableAmountMulti'
      | 'calcRocketeerReward'
      | 'calcStakeReward'
      | 'claim'
      | 'claimAll'
      | 'claimMulti'
      | 'createRace'
      | 'enterRace'
      | 'finishRace'
      | 'getActiveRaceIds'
      | 'getBlockhash'
      | 'getBlockhashUint'
      | 'getRace'
      | 'getRaceConfig'
      | 'getRaceCount'
      | 'getRocketForRace'
      | 'getRocketsForRace'
      | 'getStakeAmountForStaker'
      | 'getTimeParams'
      | 'getWhitelistedNfts'
      | 'initialize'
      | 'magic'
      | 'maxBoostsPerRocket'
      | 'owner'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'revealBoosts'
      | 'setBeneficiary'
      | 'setRaceConfig'
      | 'setTimeParams'
      | 'stakeOnRocket'
      | 'startRace'
      | 'transferOwnership'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: '_calcRevealTimestamp',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'applyBoost',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'autoCreateNextRace', values?: undefined): string;
  encodeFunctionData(functionFragment: 'beneficiary', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calcClaimableAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'calcClaimableAmountAll', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'calcClaimableAmountMulti',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'calcRocketeerReward',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'calcStakeReward',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claimAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimMulti', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'createRace', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enterRace',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'finishRace', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getActiveRaceIds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBlockhash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBlockhashUint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRace', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getRaceConfig', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRaceCount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRocketForRace',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getRocketsForRace', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getStakeAmountForStaker',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'getTimeParams', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWhitelistedNfts', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'magic', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxBoostsPerRocket', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revealBoosts',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setBeneficiary', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setRaceConfig', values: [Race2Uranus.RaceConfigStruct]): string;
  encodeFunctionData(functionFragment: 'setTimeParams', values: [Race2Uranus.TimeParamsStruct]): string;
  encodeFunctionData(
    functionFragment: 'stakeOnRocket',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'startRace', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: '_calcRevealTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'applyBoost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'autoCreateNextRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'beneficiary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calcClaimableAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calcClaimableAmountAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calcClaimableAmountMulti', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calcRocketeerReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calcStakeReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimMulti', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finishRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActiveRaceIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockhash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockhashUint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRaceConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRaceCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRocketForRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRocketsForRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeAmountForStaker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTimeParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWhitelistedNfts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'magic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxBoostsPerRocket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revealBoosts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBeneficiary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRaceConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTimeParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeOnRocket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startRace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'BoostApplied(uint256,uint8,address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RaceCreated(uint256)': EventFragment;
    'RaceEntered(uint256,uint8,address,address,uint256)': EventFragment;
    'RaceFinished(uint256,uint8,address,uint256,address)': EventFragment;
    'RaceStarted(uint256,uint256)': EventFragment;
    'RocketeerRewardClaimed(uint256,address,uint256)': EventFragment;
    'StakeRewardClaimed(uint256,address,uint256)': EventFragment;
    'StakedOnRocket(uint256,uint8,address,uint256)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BoostApplied'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RaceCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RaceEntered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RaceFinished'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RaceStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RocketeerRewardClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakeRewardClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakedOnRocket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BoostAppliedEventObject {
  raceId: BigNumber;
  rocketId: number;
  booster: string;
}
export type BoostAppliedEvent = TypedEvent<[BigNumber, number, string], BoostAppliedEventObject>;

export type BoostAppliedEventFilter = TypedEventFilter<BoostAppliedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RaceCreatedEventObject {
  raceId: BigNumber;
}
export type RaceCreatedEvent = TypedEvent<[BigNumber], RaceCreatedEventObject>;

export type RaceCreatedEventFilter = TypedEventFilter<RaceCreatedEvent>;

export interface RaceEnteredEventObject {
  raceId: BigNumber;
  rocketId: number;
  rocketeer: string;
  nft: string;
  nftId: BigNumber;
}
export type RaceEnteredEvent = TypedEvent<[BigNumber, number, string, string, BigNumber], RaceEnteredEventObject>;

export type RaceEnteredEventFilter = TypedEventFilter<RaceEnteredEvent>;

export interface RaceFinishedEventObject {
  raceId: BigNumber;
  winningRocketId: number;
  nft: string;
  nftId: BigNumber;
  rocketeer: string;
}
export type RaceFinishedEvent = TypedEvent<[BigNumber, number, string, BigNumber, string], RaceFinishedEventObject>;

export type RaceFinishedEventFilter = TypedEventFilter<RaceFinishedEvent>;

export interface RaceStartedEventObject {
  raceId: BigNumber;
  revealBlockNumber: BigNumber;
}
export type RaceStartedEvent = TypedEvent<[BigNumber, BigNumber], RaceStartedEventObject>;

export type RaceStartedEventFilter = TypedEventFilter<RaceStartedEvent>;

export interface RocketeerRewardClaimedEventObject {
  raceId: BigNumber;
  rocketeer: string;
  amount: BigNumber;
}
export type RocketeerRewardClaimedEvent = TypedEvent<[BigNumber, string, BigNumber], RocketeerRewardClaimedEventObject>;

export type RocketeerRewardClaimedEventFilter = TypedEventFilter<RocketeerRewardClaimedEvent>;

export interface StakeRewardClaimedEventObject {
  raceId: BigNumber;
  staker: string;
  amount: BigNumber;
}
export type StakeRewardClaimedEvent = TypedEvent<[BigNumber, string, BigNumber], StakeRewardClaimedEventObject>;

export type StakeRewardClaimedEventFilter = TypedEventFilter<StakeRewardClaimedEvent>;

export interface StakedOnRocketEventObject {
  raceId: BigNumber;
  rocketId: number;
  staker: string;
  amount: BigNumber;
}
export type StakedOnRocketEvent = TypedEvent<[BigNumber, number, string, BigNumber], StakedOnRocketEventObject>;

export type StakedOnRocketEventFilter = TypedEventFilter<StakedOnRocketEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Race2Uranus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Race2UranusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _calcRevealTimestamp(
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _blastOffTimes: PromiseOrValue<BigNumberish>[],
      _revealDelayMinutes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { revealTimestamp: BigNumber }>;

    applyBoost(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    autoCreateNextRace(overrides?: CallOverrides): Promise<[boolean]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    calcClaimableAmount(
      user: PromiseOrValue<string>,
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    calcClaimableAmountAll(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    calcClaimableAmountMulti(
      user: PromiseOrValue<string>,
      raceIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    calcRocketeerReward(
      raceId: PromiseOrValue<BigNumberish>,
      rocketeer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean[]]>;

    calcStakeReward(
      raceId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    claimMulti(
      raceIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    enterRace(
      raceId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveRaceIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getBlockhash(overrides?: CallOverrides): Promise<[string]>;

    getBlockhashUint(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[Race2Uranus.RaceStructOutput]>;

    getRaceConfig(overrides?: CallOverrides): Promise<[Race2Uranus.RaceConfigStructOutput]>;

    getRaceCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRocketForRace(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Race2Uranus.RocketStructOutput]>;

    getRocketsForRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Race2Uranus.RocketStructOutput[]]>;

    getStakeAmountForStaker(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimeParams(overrides?: CallOverrides): Promise<[Race2Uranus.TimeParamsStructOutput]>;

    getWhitelistedNfts(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _magicAddr: PromiseOrValue<string>,
      _whitelistedNfts: PromiseOrValue<string>[],
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    magic(overrides?: CallOverrides): Promise<[string]>;

    maxBoostsPerRocket(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revealBoosts(
      raceId: PromiseOrValue<BigNumberish>,
      rocketCount: PromiseOrValue<BigNumberish>,
      boostCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRaceConfig(
      _raceConfig: Race2Uranus.RaceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeParams(
      _timeParams: Race2Uranus.TimeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeOnRocket(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _calcRevealTimestamp(
    _currentTimestamp: PromiseOrValue<BigNumberish>,
    _blastOffTimes: PromiseOrValue<BigNumberish>[],
    _revealDelayMinutes: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyBoost(
    raceId: PromiseOrValue<BigNumberish>,
    rocketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  autoCreateNextRace(overrides?: CallOverrides): Promise<boolean>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  calcClaimableAmount(
    user: PromiseOrValue<string>,
    raceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcClaimableAmountAll(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  calcClaimableAmountMulti(
    user: PromiseOrValue<string>,
    raceIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcRocketeerReward(
    raceId: PromiseOrValue<BigNumberish>,
    rocketeer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean[]]>;

  calcStakeReward(
    raceId: PromiseOrValue<BigNumberish>,
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    raceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  claimMulti(
    raceIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  enterRace(
    raceId: PromiseOrValue<BigNumberish>,
    nft: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishRace(
    raceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveRaceIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getBlockhash(overrides?: CallOverrides): Promise<string>;

  getBlockhashUint(overrides?: CallOverrides): Promise<BigNumber>;

  getRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<Race2Uranus.RaceStructOutput>;

  getRaceConfig(overrides?: CallOverrides): Promise<Race2Uranus.RaceConfigStructOutput>;

  getRaceCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRocketForRace(
    raceId: PromiseOrValue<BigNumberish>,
    rocketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Race2Uranus.RocketStructOutput>;

  getRocketsForRace(
    raceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Race2Uranus.RocketStructOutput[]>;

  getStakeAmountForStaker(
    raceId: PromiseOrValue<BigNumberish>,
    rocketId: PromiseOrValue<BigNumberish>,
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimeParams(overrides?: CallOverrides): Promise<Race2Uranus.TimeParamsStructOutput>;

  getWhitelistedNfts(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _magicAddr: PromiseOrValue<string>,
    _whitelistedNfts: PromiseOrValue<string>[],
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  magic(overrides?: CallOverrides): Promise<string>;

  maxBoostsPerRocket(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revealBoosts(
    raceId: PromiseOrValue<BigNumberish>,
    rocketCount: PromiseOrValue<BigNumberish>,
    boostCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBeneficiary(
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRaceConfig(
    _raceConfig: Race2Uranus.RaceConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeParams(
    _timeParams: Race2Uranus.TimeParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeOnRocket(
    raceId: PromiseOrValue<BigNumberish>,
    rocketId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startRace(
    raceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _calcRevealTimestamp(
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _blastOffTimes: PromiseOrValue<BigNumberish>[],
      _revealDelayMinutes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyBoost(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    autoCreateNextRace(overrides?: CallOverrides): Promise<boolean>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    calcClaimableAmount(
      user: PromiseOrValue<string>,
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcClaimableAmountAll(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calcClaimableAmountMulti(
      user: PromiseOrValue<string>,
      raceIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcRocketeerReward(
      raceId: PromiseOrValue<BigNumberish>,
      rocketeer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean[]]>;

    calcStakeReward(
      raceId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    claimAll(overrides?: CallOverrides): Promise<void>;

    claimMulti(raceIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    createRace(overrides?: CallOverrides): Promise<void>;

    enterRace(
      raceId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getActiveRaceIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getBlockhash(overrides?: CallOverrides): Promise<string>;

    getBlockhashUint(overrides?: CallOverrides): Promise<BigNumber>;

    getRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<Race2Uranus.RaceStructOutput>;

    getRaceConfig(overrides?: CallOverrides): Promise<Race2Uranus.RaceConfigStructOutput>;

    getRaceCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRocketForRace(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Race2Uranus.RocketStructOutput>;

    getRocketsForRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Race2Uranus.RocketStructOutput[]>;

    getStakeAmountForStaker(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeParams(overrides?: CallOverrides): Promise<Race2Uranus.TimeParamsStructOutput>;

    getWhitelistedNfts(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _magicAddr: PromiseOrValue<string>,
      _whitelistedNfts: PromiseOrValue<string>[],
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    magic(overrides?: CallOverrides): Promise<string>;

    maxBoostsPerRocket(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revealBoosts(
      raceId: PromiseOrValue<BigNumberish>,
      rocketCount: PromiseOrValue<BigNumberish>,
      boostCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBeneficiary(_beneficiary: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRaceConfig(_raceConfig: Race2Uranus.RaceConfigStruct, overrides?: CallOverrides): Promise<void>;

    setTimeParams(_timeParams: Race2Uranus.TimeParamsStruct, overrides?: CallOverrides): Promise<void>;

    stakeOnRocket(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'BoostApplied(uint256,uint8,address)'(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketId?: null,
      booster?: null
    ): BoostAppliedEventFilter;
    BoostApplied(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketId?: null,
      booster?: null
    ): BoostAppliedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'RaceCreated(uint256)'(raceId?: PromiseOrValue<BigNumberish> | null): RaceCreatedEventFilter;
    RaceCreated(raceId?: PromiseOrValue<BigNumberish> | null): RaceCreatedEventFilter;

    'RaceEntered(uint256,uint8,address,address,uint256)'(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketId?: null,
      rocketeer?: null,
      nft?: null,
      nftId?: null
    ): RaceEnteredEventFilter;
    RaceEntered(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketId?: null,
      rocketeer?: null,
      nft?: null,
      nftId?: null
    ): RaceEnteredEventFilter;

    'RaceFinished(uint256,uint8,address,uint256,address)'(
      raceId?: PromiseOrValue<BigNumberish> | null,
      winningRocketId?: null,
      nft?: null,
      nftId?: null,
      rocketeer?: null
    ): RaceFinishedEventFilter;
    RaceFinished(
      raceId?: PromiseOrValue<BigNumberish> | null,
      winningRocketId?: null,
      nft?: null,
      nftId?: null,
      rocketeer?: null
    ): RaceFinishedEventFilter;

    'RaceStarted(uint256,uint256)'(
      raceId?: PromiseOrValue<BigNumberish> | null,
      revealBlockNumber?: null
    ): RaceStartedEventFilter;
    RaceStarted(raceId?: PromiseOrValue<BigNumberish> | null, revealBlockNumber?: null): RaceStartedEventFilter;

    'RocketeerRewardClaimed(uint256,address,uint256)'(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketeer?: PromiseOrValue<string> | null,
      amount?: null
    ): RocketeerRewardClaimedEventFilter;
    RocketeerRewardClaimed(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketeer?: PromiseOrValue<string> | null,
      amount?: null
    ): RocketeerRewardClaimedEventFilter;

    'StakeRewardClaimed(uint256,address,uint256)'(
      raceId?: PromiseOrValue<BigNumberish> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeRewardClaimedEventFilter;
    StakeRewardClaimed(
      raceId?: PromiseOrValue<BigNumberish> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeRewardClaimedEventFilter;

    'StakedOnRocket(uint256,uint8,address,uint256)'(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketId?: null,
      staker?: null,
      amount?: null
    ): StakedOnRocketEventFilter;
    StakedOnRocket(
      raceId?: PromiseOrValue<BigNumberish> | null,
      rocketId?: null,
      staker?: null,
      amount?: null
    ): StakedOnRocketEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
  };

  estimateGas: {
    _calcRevealTimestamp(
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _blastOffTimes: PromiseOrValue<BigNumberish>[],
      _revealDelayMinutes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyBoost(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    autoCreateNextRace(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    calcClaimableAmount(
      user: PromiseOrValue<string>,
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcClaimableAmountAll(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calcClaimableAmountMulti(
      user: PromiseOrValue<string>,
      raceIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcRocketeerReward(
      raceId: PromiseOrValue<BigNumberish>,
      rocketeer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcStakeReward(
      raceId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    claimMulti(
      raceIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    enterRace(
      raceId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveRaceIds(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockhash(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockhashUint(overrides?: CallOverrides): Promise<BigNumber>;

    getRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRaceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getRaceCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRocketForRace(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRocketsForRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeAmountForStaker(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeParams(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistedNfts(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _magicAddr: PromiseOrValue<string>,
      _whitelistedNfts: PromiseOrValue<string>[],
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    magic(overrides?: CallOverrides): Promise<BigNumber>;

    maxBoostsPerRocket(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revealBoosts(
      raceId: PromiseOrValue<BigNumberish>,
      rocketCount: PromiseOrValue<BigNumberish>,
      boostCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRaceConfig(
      _raceConfig: Race2Uranus.RaceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeParams(
      _timeParams: Race2Uranus.TimeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeOnRocket(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _calcRevealTimestamp(
      _currentTimestamp: PromiseOrValue<BigNumberish>,
      _blastOffTimes: PromiseOrValue<BigNumberish>[],
      _revealDelayMinutes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyBoost(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    autoCreateNextRace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcClaimableAmount(
      user: PromiseOrValue<string>,
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcClaimableAmountAll(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcClaimableAmountMulti(
      user: PromiseOrValue<string>,
      raceIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcRocketeerReward(
      raceId: PromiseOrValue<BigNumberish>,
      rocketeer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcStakeReward(
      raceId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    claimMulti(
      raceIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    enterRace(
      raceId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveRaceIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockhash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockhashUint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRaceConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRaceCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRocketForRace(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRocketsForRace(raceId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeAmountForStaker(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelistedNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _magicAddr: PromiseOrValue<string>,
      _whitelistedNfts: PromiseOrValue<string>[],
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    magic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBoostsPerRocket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revealBoosts(
      raceId: PromiseOrValue<BigNumberish>,
      rocketCount: PromiseOrValue<BigNumberish>,
      boostCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRaceConfig(
      _raceConfig: Race2Uranus.RaceConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeParams(
      _timeParams: Race2Uranus.TimeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeOnRocket(
      raceId: PromiseOrValue<BigNumberish>,
      rocketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startRace(
      raceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
